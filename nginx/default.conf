server {
  listen 80;
  server_name localhost;

  root /app/production;
  index index.html;

  # -------- SPA catch-all (everything that's NOT /api-*) --------
  location / {
    # Serve file if it exists, otherwise hand back the SPA
    try_files $uri $uri/ /index.html;

    # CORS (dev)
    add_header 'Access-Control-Allow-Origin' "http://localhost:8000" always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
    add_header 'Access-Control-Allow-Headers' 'Content-Type';

    # Inject ENV only into HTML responses
    sub_filter '</head>' '<script>window.ENV="${ENVIRONMENT}";</script></head>';
    sub_filter_once on;

    # (Optional) long cache for static assets the SPA links to
    # You can keep global caching via headers on the files themselves if preferred
  }

  # Static asset hard cache (optional but recommended)
  location ~* \.(?:js|css|png|jpg|jpeg|gif|svg|ico|woff2?)$ {
    try_files $uri =404;
    access_log off;
    expires 6M;
    add_header Cache-Control "public, max-age=15552000, immutable";
  }

  # Files we donâ€™t want cached
  location = /discovery.config { expires 0; add_header Cache-Control "public"; }
  location = /index         { expires 0; add_header Cache-Control "public"; }
  location = /index.html    { expires 0; add_header Cache-Control "no-store, must-revalidate"; }

  # Health checks
  location = /ready { access_log off; return 200 '{"ready": true}'; }
  location = /alive { access_log off; return 200 '{"alive": true}'; }

  # ---------- API PROXIES ----------

  # DEV: /api-dev/* -> $DEV_API_URL/*
  location ^~ /api-dev/ {
    if ($request_method = OPTIONS) {
      add_header 'Access-Control-Allow-Origin'      $cors_allow_origin always;
      add_header 'Access-Control-Allow-Credentials' $cors_allow_credentials always;
      add_header 'Access-Control-Allow-Methods'     'GET,POST,PUT,PATCH,DELETE,OPTIONS' always;
      add_header 'Access-Control-Allow-Headers'     'Authorization,Content-Type,X-Requested-With' always;
      add_header 'Access-Control-Max-Age'           86400 always;
      return 204;
    }
    add_header 'Access-Control-Allow-Origin'      $cors_allow_origin always;
    add_header 'Access-Control-Allow-Credentials' $cors_allow_credentials always;

    rewrite ^/api-dev(?<rest>/.*)$ $rest break;

    set $full_upstream_url "$DEV_API_URL$rest$is_args$args";
    access_log /var/log/nginx/access.log proxylog;

    proxy_pass $DEV_API_URL$rest$is_args$args;
    proxy_http_version 1.1;
    proxy_set_header Host              $proxy_host;   # keep SNI/Host aligned with upstream
    proxy_set_header X-Real-IP         $remote_addr;
    proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    proxy_connect_timeout 10s;
    proxy_send_timeout    60s;
    proxy_read_timeout    60s;

    proxy_hide_header Access-Control-Allow-Origin;
    proxy_hide_header Access-Control-Allow-Credentials;
    proxy_hide_header Access-Control-Allow-Headers;
    proxy_hide_header Access-Control-Allow-Methods;
  }

  # QA: /api-qa/* -> $QA_API_URL/*
  location ^~ /api-qa/ {
    if ($request_method = OPTIONS) {
      add_header 'Access-Control-Allow-Origin'      $cors_allow_origin always;
      add_header 'Access-Control-Allow-Credentials' $cors_allow_credentials always;
      add_header 'Access-Control-Allow-Methods'     'GET,POST,PUT,PATCH,DELETE,OPTIONS' always;
      add_header 'Access-Control-Allow-Headers'     'Authorization,Content-Type,X-Requested-With' always;
      add_header 'Access-Control-Max-Age'           86400 always;
      return 204;
    }
    add_header 'Access-Control-Allow-Origin'      $cors_allow_origin always;
    add_header 'Access-Control-Allow-Credentials' $cors_allow_credentials always;

    rewrite ^/api-qa(?<rest>/.*)$ $rest break;

    set $full_upstream_url "$QA_API_URL$rest$is_args$args";
    access_log /var/log/nginx/access.log proxylog;

    proxy_pass $QA_API_URL$rest$is_args$args;
    proxy_http_version 1.1;
    proxy_set_header Host              $proxy_host;
    proxy_set_header X-Real-IP         $remote_addr;
    proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    proxy_connect_timeout 10s;
    proxy_send_timeout    60s;
    proxy_read_timeout    60s;

    proxy_hide_header Access-Control-Allow-Origin;
    proxy_hide_header Access-Control-Allow-Credentials;
    proxy_hide_header Access-Control-Allow-Headers;
    proxy_hide_header Access-Control-Allow-Methods;
  }

  # PROD: /api/* -> $PROD_API_URL/*
  location ^~ /api-prod/ {
    if ($request_method = OPTIONS) {
      add_header 'Access-Control-Allow-Origin'      $cors_allow_origin always;
      add_header 'Access-Control-Allow-Credentials' $cors_allow_credentials always;
      add_header 'Access-Control-Allow-Methods'     'GET,POST,PUT,PATCH,DELETE,OPTIONS' always;
      add_header 'Access-Control-Allow-Headers'     'Authorization,Content-Type,X-Requested-With' always;
      add_header 'Access-Control-Max-Age'           86400 always;
      return 204;
    }
    add_header 'Access-Control-Allow-Origin'      $cors_allow_origin always;
    add_header 'Access-Control-Allow-Credentials' $cors_allow_credentials always;

    rewrite ^/api-prod(?<rest>/.*)$ $rest break;

    set $full_upstream_url "$PROD_API_URL$rest$is_args$args";
    access_log /var/log/nginx/access.log proxylog;

    proxy_pass $PROD_API_URL$rest$is_args$args;
    proxy_http_version 1.1;
    proxy_set_header Host              $proxy_host;
    proxy_set_header X-Real-IP         $remote_addr;
    proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    proxy_connect_timeout 10s;
    proxy_send_timeout    60s;
    proxy_read_timeout    60s;

    proxy_hide_header Access-Control-Allow-Origin;
    proxy_hide_header Access-Control-Allow-Credentials;
    proxy_hide_header Access-Control-Allow-Headers;
    proxy_hide_header Access-Control-Allow-Methods;
  }
  # ---------- /API PROXIES ----------
}
